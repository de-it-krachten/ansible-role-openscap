#!/bin/bash -e

############################################################
# Variables
############################################################

# Generic
tmpdir=$(mktemp -d)

# OVAL file(s)

openscap_url="{{ openscap_url }}"
openscap_archive="$tmpdir/{{ openscap_url | basename }}"
openscap_file="$tmpdir/{{ openscap_url | basename | regex_replace('\.bz2') }}"

# Result file(s)
openscap_report="{{ openscap_log_dir }}/oval-report-{{ inventory_hostname }}.html"
openscap_results="{{ openscap_log_dir }}/oval-report-{{ inventory_hostname }}.xml"
packages_yum="{{ openscap_log_dir }}/packages-{{ inventory_hostname }}.yum"
packages_apt="{{ openscap_log_dir }}/packages-{{ inventory_hostname }}.apt"
repos_yum="{{ openscap_log_dir }}/repos-{{ inventory_hostname }}.yum"
repos_apt="{{ openscap_log_dir }}/repos-{{ inventory_hostname }}.apt"

openscap_gpg_recipient="{{ openscap_gpg_recipient | default('') }}"
openscap_sftp_upload_path="{{ openscap_sftp_upload_path | default('') }}"


############################################################
# Function
############################################################

function Download
{

  # Download latest OVAL
  wget -q -O ${openscap_archive} ${openscap_url}

  # Unpack the archive
  [[ ${openscap_archive} =~ \.bz2 ]] && bzip2 -d ${openscap_archive}

}

function Report
{

  # Execute OpenSCAP
  oscap oval eval --results ${openscap_results} \
                  --report ${openscap_report} \
                  ${openscap_file} > /dev/null

}

function Package_list
{

  if [[ -x /usr/bin/apt ]] ; then
    packages=${packages_apt}
    repos=${repos_apt}
    apt list --installed > ${packages} 2>/dev/null
    grep -hE '^deb\s' /etc/apt/sources.list /etc/apt/sources.list.d/*.list 2>/dev/null |\
    sed '/ppa/ s/deb //g' |\
    sed -re 's#http://ppa\.launchpad\.net/([^/]+)/([^/]+)(.*?)$#ppa:\1/\2#g' > ${repos}
  elif [[ -x /usr/bin/yum ]] ; then
    packages=${packages_yum}
    repos=${repos_yum}
    yum list installed > ${packages}
    yum repolist -v > ${repos}
  fi

}


function Encrypt
{

  File1=$1
  File2=${tmpdir}/$(basename $1).gpg

  # Encrypt report using GPG
  gpg --encrypt --armor \
      --trust-model always \
      --recipient ${openscap_gpg_recipient} \
      --output ${File2} \
      ${File1}

}

function Send_sftp
{

  # Upload the report & results
  sftp -oBatchMode=no -b - openscap_server <<EOF
lcd ${tmpdir}
cd ${openscap_sftp_upload_path}
put *.gpg
bye
EOF

}

############################################################
# Main
############################################################

# Make sure temporary files are cleaned at exit
trap 'rm -fr ${tmpdir}' EXIT
trap 'exit 1' HUP QUIT KILL TERM INT

# Download latest OVAL
echo "--- Download latest OVAL definitions"
Download

echo "--- Create overview of installed packages including source"
Package_list

# Execute OpenSCAP
echo "--- Create OpenSCAP report"
Report

# Encrypt report using GPG
if [[ -n $openscap_gpg_recipient ]]
then
  echo "--- Encrypt report & results using GPG"
  Encrypt ${openscap_results}
  Encrypt ${openscap_report}
  Encrypt ${packages}
  Encrypt ${repos}

  # Upload the report & results
  echo "--- Send encrypted report using SFTP"
  Send_sftp
fi

# Exit now
exit 0
