#!/bin/bash

##############################################################
#
# Defining standard variables
#
##############################################################

# Set temporary PATH
export PATH=/bin:/usr/bin:/sbin:/usr/sbin:/usr/local/bin:$PATH

# Get the name of the calling script
FILENAME=$(readlink -f $0)
BASENAME="${FILENAME##*/}"
BASENAME_ROOT=${BASENAME%%.*}
DIRNAME="${FILENAME%/*}"

# Get name of symlink used to execute
FILENAME1=$(realpath -s $0)
BASENAME1="${FILENAME1##*/}"
BASENAME1_ROOT=${BASENAME1%%.*}
DIRNAME1="${FILENAME1%/*}"

# Define temorary files, debug direcotory, config and lock file
TMPDIR=$(mktemp -d)
VARTMPDIR=/var/tmp
TMPFILE=${TMPDIR}/${BASENAME}.${RANDOM}.${RANDOM}
DEBUGDIR=${TMPDIR}/${BASENAME_ROOT}_${USER}
CONFIGFILE=${DIRNAME}/${BASENAME_ROOT}.cfg
LOCKFILE=${VARTMP}/${BASENAME_ROOT}.lck

# Logfile & directory
LOGDIR=/var/log
LOGFILE=${LOGDIR}/${BASENAME_ROOT}.log

# Set date/time related variables
DATESTAMP=$(date "+%Y%m%d")
TIMESTAMP=$(date "+%Y%m%d.%H%M%S")

# Figure out the platform
OS=$(uname -s)

# Get the hostname
HOSTNAME=$(hostname -s)


##############################################################
#
# Defining custom variables
#
##############################################################

# OVAL file(s)
openscap_url="{{ openscap_url }}"
openscap_archive="$TMPDIR/{{ openscap_url | basename }}"
openscap_file="$TMPDIR/{{ openscap_url | basename | regex_replace('\.bz2') }}"

# Result file(s)
openscap_report="{{ openscap_log_dir }}/oval-report.html"
openscap_results="{{ openscap_log_dir }}/oval-report.xml"
packages_yum="{{ openscap_log_dir }}/packages.yum"
packages_apt="{{ openscap_log_dir }}/packages.apt"
repos_yum="{{ openscap_log_dir }}/repos.yum"
repos_apt="{{ openscap_log_dir }}/repos.apt"

openscap_gpg_recipient="{{ openscap_gpg_recipient | default('') }}"
openscap_sftp_upload_path="{{ openscap_sftp_upload_path | default('') }}"


##############################################################
#
# Defining standarized functions
#
#############################################################

#FUNCTIONS=${DIRNAME}/functions.sh
#if [[ -f ${FUNCTIONS} ]]
#then
#   . ${FUNCTIONS}
#else
#   echo "Functions file '${FUNCTIONS}' could not be found!" >&2
#   exit 1
#fi


##############################################################
#
# Defining customized functions
#
#############################################################

function Usage
{

  cat << EOF | grep -v "^#"

$BASENAME

Usage : $BASENAME <flags> <arguments>

Flags :

   -d|--debug   : Debug mode (set -x)
   -D|--dry-run : Dry run mode
   -h|--help    : Prints this help message
   -v|--verbose : Verbose output

EOF

}

function Download
{

  # Download latest OVAL
  wget -q -O ${openscap_archive} ${openscap_url}

  # Unpack the archive
  [[ ${openscap_archive} =~ \.bz2 ]] && bzip2 -d ${openscap_archive}

}

function Report
{

  # Execute OpenSCAP
  oscap oval eval --results ${openscap_results} \
                  --report ${openscap_report} \
                  ${openscap_file} > /dev/null

}

function Package_list
{

  if [[ -x /usr/bin/apt ]] ; then
    packages=${packages_apt}
    repos=${repos_apt}
    apt list --installed > ${packages} 2>/dev/null
    grep -hE '^deb\s' /etc/apt/sources.list /etc/apt/sources.list.d/*.list 2>/dev/null |\
    sed '/ppa/ s/deb //g' |\
    sed -re 's#http://ppa\.launchpad\.net/([^/]+)/([^/]+)(.*?)$#ppa:\1/\2#g' > ${repos}
  elif [[ -x /usr/bin/yum ]] ; then
    packages=${packages_yum}
    repos=${repos_yum}
    yum list installed > ${packages}
    yum repolist -v > ${repos}
  fi

}

##############################################################
#
# Main programs
#
#############################################################

# Make sure temporary files are cleaned at exit
trap 'rm -fr ${TMPDIR}' EXIT
trap 'exit 1' HUP QUIT KILL TERM INT

# Set the defaults
Debug_level=0
Verbose=false
Verbose_level=0
Dry_run=false
Echo=

# parse command line into arguments and check results of parsing
while getopts :dDhtv-: OPT
do

  # Support long options
  if [[ $OPT = "-" ]] ; then
    OPT="${OPTARG%%=*}"       # extract long option name
    OPTARG="${OPTARG#$OPT}"   # extract long option argument (may be empty)
    OPTARG="${OPTARG#=}"      # if long option argument, remove assigning `=`
  fi

  case $OPT in
    d|debug)
      Verbose=true
      set -vx
      ;;
    D|dry-run)
      Dry_run=true
      Dry_run1="-D"
      Echo=echo
      ;;
    h|help)
      Usage
      exit 0
      ;;
    t|transfer)
      Transfer=true
      ;;
    v|verbose)
      Verbose=true
      ;;
    *)
      echo "Unknown flag -$OPT given!" >&2
      exit 1
      ;;
  esac

  # Set flag to be use by Test_flag
  eval ${OPT}flag=1

done
shift $(($OPTIND -1))

# Write to logfile only
if [[ -t 0 ]]
then
  { coproc tee { tee -a $LOGFILE ;} >&3 ;} 3>&1
  exec >&${tee[1]} 2>&1
else
  exec >>${LOGFILE} 2>&1
fi

# Download latest OVAL
echo "--- Download latest OVAL definitions"
Download

echo "--- Create overview of installed packages including source"
Package_list

# Execute OpenSCAP
echo "--- Create OpenSCAP report"
Report

# Send encrypted reports
if [[ $Transfer == true ]]
then
  echo "--- Transferring files to remote server"
  /usr/local/bin/file-transfer.sh \
    ${openscap_results} \
    ${openscap_report} \
    ${packages} \
    ${repos}
fi

# Exit now
exit 0
