#!/bin/bash

##############################################################
#
# Defining standard variables
#
##############################################################

# Set temporary PATH
export PATH=/bin:/usr/bin:/sbin:/usr/sbin:/usr/local/bin:$PATH

# Get the name of the calling script
FILENAME=$(readlink -f $0)
BASENAME="${FILENAME##*/}"
BASENAME_ROOT=${BASENAME%%.*}
DIRNAME="${FILENAME%/*}"

# Get name of symlink used to execute
FILENAME1=$(realpath -s $0)
BASENAME1="${FILENAME1##*/}"
BASENAME1_ROOT=${BASENAME1%%.*}
DIRNAME1="${FILENAME1%/*}"

# Define temorary files, debug direcotory, config and lock file
TMPDIR=/tmp
TMPFILE=${TMPDIR}/${BASENAME}.${RANDOM}.${RANDOM}

# Logfile & directory
LOGDIR=/var/log
LOGFILE=${LOGDIR}/${BASENAME_ROOT}.log

# Set date/time related variables
DATESTAMP=$(date "+%Y%m%d")
TIMESTAMP=$(date "+%Y%m%d.%H%M%S")

# Figure out the platform
OS=$(uname -s)

# Get the hostname
HOSTNAME=$(hostname -s)


##############################################################
#
# Defining custom variables
#
##############################################################

# OVAL file(s)
openscap_url="{{ openscap_url }}"
openscap_archive="$TMPDIR/{{ openscap_url | basename }}"
openscap_file="$TMPDIR/{{ openscap_url | basename | regex_replace('\.bz2') }}"

# Result file(s)
openscap_report="{{ openscap_log_dir }}/oval-report.html"
openscap_results="{{ openscap_log_dir }}/oval-report.xml"
packages_yum="{{ openscap_log_dir }}/packages.yum"
packages_apt="{{ openscap_log_dir }}/packages.apt"
repos_yum="{{ openscap_log_dir }}/repos.yum"
repos_apt="{{ openscap_log_dir }}/repos.apt"

openscap_gpg_recipient="{{ openscap_gpg_recipient | default('') }}"
openscap_sftp_upload_path="{{ openscap_sftp_upload_path | default('') }}"


##############################################################
#
# Defining standarized functions
#
#############################################################

#FUNCTIONS=${DIRNAME}/functions.sh
#if [[ -f ${FUNCTIONS} ]]
#then
#   . ${FUNCTIONS}
#else
#   echo "Functions file '${FUNCTIONS}' could not be found!" >&2
#   exit 1
#fi


##############################################################
#
# Defining customized functions
#
#############################################################

function Usage
{

  cat << EOF | grep -v "^#"

$BASENAME

Usage : $BASENAME <flags> <arguments>

Flags :

   -d|--debug    : Debug mode (set -x)
   -D|--dry-run  : Dry run mode
   -h|--help     : Prints this help message
   -v|--verbose  : Verbose output

   -i|--insecure : Disable SSL/TLS verification

EOF

}

function Log
{

  echo "`date +"%Y-%m-%d %H:%M:%S"` | $@"

}

function Wait4proc
{

    local Pid=$1
    local Counter=0
    local Maxcounter=300
    local Step=10

    while [[ $Counter -ne $Maxcounter ]]
    do
      if [[ -d /proc/$Pid ]] 
      then
        Counter=$(($Counter+$Step))
        sleep $Step
      else
        return 0
      fi
    done

    Log "Process still running after $Maxcounter seconds .. killing it" >&2
    kill $Pid
    sleep 3
    kill -9 $Pid >/dev/null 2>&1

    return 1

}

function Download
{

  # Download latest OVAL
  Args="-q"
  [[ $Insecure == true ]] && Args="$Args --no-check-certificate"
  wget ${Args} -O ${openscap_archive} ${openscap_url} || exit 1

}

function Extract
{

  # Unpack the archive
  if [[ ${openscap_archive} =~ \.bz2 ]]
  then
    bzip2 -f -k -d ${openscap_archive} || exit 1
  fi

}

function Report
{

  if [[ $Debug == true ]]
  then
    # Execute OpenSCAP
    oscap oval eval --verbose DEVEL \
                    --results ${openscap_results} \
                    --report ${openscap_report} \
                    ${openscap_file} || exit 1
  else
    # Execute OpenSCAP
    oscap oval eval --results ${openscap_results} \
                    --report ${openscap_report} \
                    ${openscap_file} > /dev/null &
    Wait4proc $! || exit 1
  fi

}

function Results
{

  Results=$(grep "\"SmallText resultbadB\"" ${openscap_report} | \
  grep "\"Non-Compliant/Vulnerable/Unpatched\"" | \
  sed 's|.*Non-Compliant/Vulnerable/Unpatched||' | \
  sed "s/<.*//" | \
  sed "s/.*>//")
  Log "Vulnerabilities found: $Results"

}

function Compress
{

  Log "Compress report & results"
  bzip2 -fk ${openscap_results}
  bzip2 -fk ${openscap_report}

}

function Package_list
{

  if [[ -x /usr/bin/apt ]] ; then
    packages=${packages_apt}
    repos=${repos_apt}
    apt list --installed > ${packages} 2>/dev/null
    grep -hE '^deb\s' /etc/apt/sources.list /etc/apt/sources.list.d/*.list 2>/dev/null |\
    sed '/ppa/ s/deb //g' |\
    sed -re 's#http://ppa\.launchpad\.net/([^/]+)/([^/]+)(.*?)$#ppa:\1/\2#g' > ${repos}
  elif [[ -x /usr/bin/yum ]] ; then
    packages=${packages_yum}
    repos=${repos_yum}
    yum list installed > ${packages}
    yum repolist -v > ${repos}
  fi

}

##############################################################
#
# Main programs
#
#############################################################

# Make sure temporary files are cleaned at exit
trap 'rm -f ${TMPFILE}*' EXIT
trap 'exit 1' HUP QUIT KILL TERM INT

# Set the defaults
Debug=false
Verbose=false
Extra_info=false
Insecure=false
Download=true

# parse command line into arguments and check results of parsing
while getopts :dDihtvx-: OPT
do

  # Support long options
  if [[ $OPT = "-" ]] ; then
    OPT="${OPTARG%%=*}"       # extract long option name
    OPTARG="${OPTARG#$OPT}"   # extract long option argument (may be empty)
    OPTARG="${OPTARG#=}"      # if long option argument, remove assigning `=`
  fi

  case $OPT in
    d|debug)
      Debug=true
      Verbose=true
      set -vx
      ;;
    D|no-download)
      Download=false
      ;;
    h|help)
      Usage
      exit 0
      ;;
    i|insecure)
      Insecure=true
      ;;
    t|transfer)
      Transfer=true
      ;;
    v|verbose)
      Verbose=true
      ;;
    x|extra)
      Extra_info=true
      ;;
    *)
      echo "Unknown flag -$OPT given!" >&2
      exit 1
      ;;
  esac

  # Set flag to be use by Test_flag
  eval ${OPT}flag=1

done
shift $(($OPTIND -1))

# Write to logfile only
if [[ -t 0 ]]
then
  { coproc tee { tee -a $LOGFILE ;} >&3 ;} 3>&1
  exec >&${tee[1]} 2>&1
else
  exec >>${LOGFILE} 2>&1
fi

# Download latest OVAL
if [[ $Download == true ]]
then
  Log "Download latest OVAL definitions"
  Download
else
  Log "Skipping download of latest OVAL definitions"
fi

# Extract the file
Log "Extract OVAL definitions"
Extract

# Delete old log files
Log "Delete old log files"
rm -f \
  ${openscap_results} \
  ${openscap_report} \
  ${packages_yum} \
  ${packages_apt} \
  ${repos_yum} \
  ${repos_apt}

if [[ $Extra_info == true ]]
then
  Log "Create overview of installed packages including source"
  Package_list
fi

# Execute OpenSCAP
Log "Create OpenSCAP report"
Report
Results
Compress

# Send encrypted reports
if [[ $Transfer == true ]]
then
  Log "Transferring files to remote server"
  /usr/local/bin/file-transfer.sh \
    ${openscap_results} \
    ${openscap_report}
  if [[ $Extra_info == true ]]
  then
    Log "Transfer additional files"
    /usr/local/bin/file-transfer.sh \
      ${packages} \
      ${repos}
  fi
fi

Log "Script finished"

# Exit now
exit 0
