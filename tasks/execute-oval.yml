---

- name: Perform central download
  when: openscap_central_download | bool
  block:

    - name: Create temporary file
      ansible.builtin.tempfile:
      become: no
      changed_when: false
      register: __tempfile
      run_once: yes
      delegate_to: localhost

    - name: Write all OVAL url to file
      ansible.builtin.lineinfile:
        path: "{{ __tempfile.path }}"
        line: "- {{ openscap_url }}"
        mode: "0600"
      changed_when: false
      become: no
      throttle: 1
      delegate_to: localhost

    - name: Get list of all unique OVAL file
      ansible.builtin.set_fact:
        oval_urls: "{{ lookup('file', __tempfile.path) | from_yaml | unique }}"

    - name: Create temporary directory
      ansible.builtin.tempfile:
        state: directory
      changed_when: false
      become: no
      register: __tempdir
      run_once: yes
      delegate_to: localhost

    - name: Download all OVAL files
      ansible.builtin.get_url:
        url: "{{ item }}"
        dest: "{{ __tempdir.path }}/{{ item | basename }}"
        owner: "{{ lookup('pipe', 'id -un') }}"
        group: "{{ lookup('pipe', 'id -gn') }}"
        mode: "0600"
      changed_when: false
      loop: "{{ oval_urls }}"
      delegate_to: localhost
      run_once: yes

    - name: Distribute OVAL file to each host
      ansible.builtin.copy:
        src: "{{ __tempdir.path }}/{{ openscap_url | basename }}"
        dest: /tmp/{{ openscap_url | basename }}
        mode: "0600"
      become: yes
      changed_when: false

    - name: Delete temporary directory
      ansible.builtin.file:
        path: "{{ __tempdir.path }}"
        state: absent
      become: no
      changed_when: false


- name: Execute script on host
  block:

    - name: Add '-D' flag when individual OVAL download is undesirable (central download)
      ansible.builtin.set_fact:
        openscap_schedule_command: "{{ openscap_schedule_command }} -D"
      when: openscap_central_download | bool and openscap_schedule_command is not search('-D')

    - name: Delete previously created log files
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      loop:
        - /var/log/openscap-oval-report.log
        - /var/log/openscap
      become: yes
      when: openscap_log_deletion is defined and openscap_log_deletion | bool

    - name: Create report directory
      ansible.builtin.file:
        name: "{{ openscap_log_dir }}"
        state: directory
        owner: root
        group: root
        mode: "0700"
      become: yes

    - name: Execute script
      ansible.builtin.command:
        cmd: "{{ openscap_schedule_command }}"
      become: yes
      changed_when: true
      tags: molecule-idempotence-notest

    - name: Get vulnerabilities found
      ansible.builtin.shell: |
        set -o pipefail
        log=/var/log/openscap-oval-report.log
        vulnerabilities=$(grep "Vulnerabilities found:" $log | tail -1 | awk '{print $NF}')
        [[ $vulnerabilities =~ : ]] && vulnerabilities="unknown"
        echo $vulnerabilities
      args:
        executable: /bin/bash
      changed_when: false
      register: __vulnerabilities

    - name: Write each host with specifics to yaml file as input for the report
      ansible.builtin.lineinfile:
        path: "{{ openscap_central_report }}"
        line: "- { host: '{{ inventory_hostname }}', os: '{{ ansible_distribution }}', version: {{ ansible_distribution_version }}, vulnerabilities: {{ __vulnerabilities.stdout }}, date: '{{ ansible_date_time.date }}', time: '{{ ansible_date_time.time }}' }"
        regex: "^- { host: '{{ inventory_hostname }}',.*"
        create: yes
        mode: "0644"
      become: yes
      throttle: 1
      delegate_to: "{{ openscap_central_server | default('localhost') }}"
      when: openscap_central_report is defined
      tags: molecule-idempotence-notest


- name: Retrieve central collection
  when: openscap_central_collection | bool
  block:

    - name: Define temporary file location on control node
      ansible.builtin.tempfile:
        state: directory
      register: __tempdir
      changed_when: false

    - name: Create local path per host
      ansible.builtin.file:
        path: "{{ __tempdir.path }}/{{ inventory_hostname }}"
        state: directory
        mode: "0750"
      changed_when: false
      become: no
      delegate_to: localhost

    - name: Get all remote files
      ansible.builtin.find:
        paths: "{{ openscap_log_dir }}"
        patterns: "{{ openscap_log_pattern }}"
      become: yes
      register: __find

    - name: Retrieve reports locally
      ansible.builtin.fetch:
        src: "{{ file.path }}"
        dest: "{{ __tempdir.path }}/{{ inventory_hostname }}/"
        flat: yes
      become: yes
      loop: "{{ __find.files }}"
      loop_control:
        loop_var: file
        label: "{{ file.path }}"
      tags: molecule-idempotence-notest

    - name: Push results to central server
      ansible.builtin.copy:
        src: "{{ __tempdir.path }}/{{ inventory_hostname }}/"
        dest: "{{ openscap_central_path }}/{{ inventory_hostname }}"
        owner: "{{ openscap_central_user | default(omit) }}"
        group: "{{ openscap_central_group | default(omit) }}"
        mode: "{{ openscap_central_mode | default('0640') }}"
      become: yes
      delegate_to: "{{ openscap_central_server | default('localhost') }}"

    - name: Delete temporary files
      ansible.builtin.file:
        path: "{{ __tempdir.path }}"
        state: absent
      changed_when: false
      run_once: yes
      become: no
      delegate_to: localhost
